
/* TESTER
	printf("\nadd_comp\n");
	printf("Test#1: EXPECTED: (14 + 7.1i), RESULT: ");
	read_comp(10.4,4.2,&A);
	read_comp(3.6,2.9,&B);
	print_comp(	add_comp(A,B));
	printf("Test#2: EXPECTED: (-6.8+7.1i), RESULT: ");
	read_comp(-10.4,4.2,&A);
	read_comp(3.6,2.9,&B);
	print_comp(	add_comp(A,B));
	printf("Test#3: EXPECTED: (-6.8+1.3i), RESULT: ");
	read_comp(-10.4,4.2,&A);
	read_comp(3.6,-2.9,&B);
	print_comp(	add_comp(A,B));
	printf("Test#4: EXPECTED: (-14-7.1)i, RESULT: ");
	read_comp(-10.4,-4.2,&A);
	read_comp(-3.6,-2.9,&B);
	print_comp(	add_comp(A,B));

	printf("\nsub_comp\n");
	printf("Test#1: EXPECTED: (6.8+7.1i), RESULT: ");
	read_comp(10.4,4.2,&A);
	read_comp(3.6,2.9,&B);
	print_comp(sub_comp(A,B));
	printf("Test#2: EXPECTED: (6.8 + 7.1)i, RESULT: ");
	read_comp(10.4,4.2,&A);
	read_comp(3.6,-2.9,&B);
	print_comp(sub_comp(A,B));

	printf("Test#3: EXPECTED: (14 - 7.1)i, RESULT: ");
	read_comp(10.4,-4.2,&A);
	read_comp(-3.6,2.9,&B);
	print_comp(sub_comp(A,B));

	printf("\nmult_comp_real\n");
	printf("Test#1: EXPECTED: (11+20.6)i, RESULT: ");
	read_comp(5.5,10.3,&C);
	print_comp(mult_comp_real(2.0,C));
	printf("Test#2: EXPECTED: (13.75+25.75)i, RESULT: ");
	read_comp(5.5,10.3,&C);
	print_comp(mult_comp_real(2.5,C));
	printf("Test#3: EXPECTED: (-13.75+25.75)i, RESULT: ");
	read_comp(-5.5,10.3,&C);
	print_comp(mult_comp_real(2.5,C));

	printf("\nmult_comp_img\n");
	printf("Test#1: EXPECTED: (-25.75-13.75)i, RESULT: ");
	print_comp(mult_comp_img(2.5,C));
	printf("Test#2: EXPECTED: (-1+0)i, RESULT: ");
	read_comp(0,1.0,&C);
	print_comp(mult_comp_img(1,C));

	printf("\nmult_comp_comp\n");
	printf("Test#1: EXPECTED: (-25.26 + 45.28)i, RESULT: ");
	read_comp(10.4,-4.2,&A);
	read_comp(-3.6,2.9,&B);
	print_comp(mult_comp_comp(A,B));
	printf("Test#2: EXPECTED: (49.62 - 15.04)i, RESULT: ");
	read_comp(-10.4,-4.2,&A);
	read_comp(-3.6,2.9,&B);
	print_comp(mult_comp_comp(A,B));

	printf("\nabs_comp\n");
		printf("Test#1: EXPECTED: (11.21606+0)i, RESULT: ");
		read_comp(10.4,-4.2,&A);
		print_comp(abs_comp(A));
		printf("Test#2: EXPECTED: (6.36318+0)i, RESULT: ");
		read_comp(-5.5,3.2,&A);
		print_comp(abs_comp(A));

*/



For input:

*/

	/*	printf("\nTrimming spaces tests\n");
	printf("Test#1\n");
	orig_line=read_user_input();
	print_line(orig_line);
	trimmed_line=fix_spaces(orig_line);
	print_line(trimmed_line);

	printf("\n\nTest#2\n");
	orig_line=read_user_input();
	print_line(orig_line);
	trimmed_line=removeBlanks(orig_line);
	print_line(trimmed_line);


	printf("\n\nTest#3\n");
	orig_line=read_user_input();
	print_line(orig_line);
	trimmed_line=removeBlanks(orig_line);
	print_line(trimmed_line);

	printf("\n\nTest#4\n");
	orig_line=read_user_input();
	print_line(orig_line);
	trimmed_line=removeBlanks(orig_line);
	print_line(trimmed_line);

	printf("\n\nTest#5\n");
	orig_line=read_user_input();
	print_line(orig_line);
	trimmed_line=removeBlanks(orig_line);
	print_line(trimmed_line);
*/




	/*for (i=0;i<5;i++){
		char * tmp ={"Hello"};
		matrix[i]=tmp;

	}*/

	/*print_matrix(matrix, COLS); */

	/*mat_size=create_substrings(trimmed_line,&matrix);
	print_matrix(matrix,mat_size);*/

	printf("Test #2:\n");
	orig_line=read_user_input();
	printf("User input: ");
	print_line(orig_line);
	trimmed_line=fix_spaces(orig_line);
	printf("trimmed input: ");
	/*print_line(orig_line);*/

	mat_size=create_substrings(trimmed_line,&matrix);
	printf("mat_size is %d\n",mat_size);
	printf("main:\n");

/*
	printf("Test #3:\n");
	orig_line=read_user_input();
	trimmed_line=fix_spaces(orig_line);
	mat_size=create_substrings(trimmed_line,&matrix);
	print_matrix(matrix,mat_size);

	printf("Test #4:\n");
	orig_line=read_user_input();
	print_line(orig_line);
	trimmed_line=fix_spaces(orig_line);
	print_line(trimmed_line);
	mat_size=create_substrings(trimmed_line,&matrix);
	print_matrix(matrix,mat_size);

*/
	printf("\n\n\nxx%s",matrix[0]);
	command=get_command(matrix);
	printf("%d",command);











	if (close_indicator==1){
		printf("You wished to stop the program. Byes!\n");
	}

	printf("\n*** END ***\n");
	return 0;
}




void print_line(array line){
	int i=0;
	int tmp=strlen(line);

	for ( i=0; i<=tmp; i++){

		printf("%c",line[i]);
	}
	printf("\n");
}

array read_user_input(){
	array input;
	char new_char;
	int line_index=0;


	input= (char *)malloc(sizeof(char)*MAXLINELENGTH);
	if (!input){
		printf("trouble with memory allocation.");
		exit(0);
	}

	while ((new_char=getchar()) !='\n'){
		if (line_index < MAXLINELENGTH){
			input[line_index]=new_char;
			line_index++;
		}
		else{
			array tmp = (char*)realloc(input,sizeof(MAXLINELENGTH)*2);
			if (!tmp){
				printf("issue with memo");
				exit(0);
			}
			else {
				input=tmp;
			}
		}
	}

	return input;
}


array fix_spaces(array orig){

	int orig_size=strlen(orig);
	array result = (char *)malloc(orig_size);
	int i;
	int counter=0;
	int allowed_space=0;
	int t=0;
	char c;

	c=orig[t];
	while ((c == ' ') ||(c == '\t')){
		t++;
		c=orig[t];
	}

	/*t holds a new char*/

	for (i=t;i<orig_size;i++){
		char c=orig[i];

		if (c ==' '){
			if ( (counter != 0) && (result[counter-1] != ' ') && (allowed_space==0) ){
				result[counter]=c;
				counter++;
				allowed_space=1;
			}
		}

		else if (c =='\t'){
			if ( (i != 0) && (result[counter-1] != ' ') && allowed_space==0 ){
				result[counter]=' ';
				counter++;
			}


		}

		else if (c=='\n'){
			result[counter]='\0';

		}


		else{
			result[counter]=c;
			counter++;
		}


	}

	return result;
}




int create_substrings(array line, array ** matrix){
	array * result;
	int line_size;
	int i=0;
	array line_copy;
	array token;
	int length;

	printf("\n~entered create_substrings\n ");
	line_size=strlen(line);


	printf("~copied array\n");
	result=(array *)malloc (5*sizeof(array));

	token=strtok(line," ,");
	while (token != NULL){
		length=strlen(token);
		result[i]=(array)malloc(length*sizeof(char));
		result[i]=token;
		i++;
		printf("token should be: %s. ",token);

		token=strtok(NULL," ,");
		printf("entered - %s to %d\n",result[i],i);
	}

	printf("finished product: ");
	print_matrix(result,i+1);


	return -1;
}







void print_matrix(array * matrix, int size){
	int i;

	for(i=0;i<size;i++){
		printf("%s\n",matrix[i]);

	}

	/*
	for (i=0;i<size;i++){
		int in_size=strlen(matrix[i]);
		int j;

		for (j=0;j<=in_size;j++){
			printf("%c", matrix[i][j]);
		}

		printf(" ");
	}

	printf("\n");
	*/
	printf("**Finished printing matrix");
}

array copy_sub_string(char src[], int point1, int point2){
	int size=(point2-point1)+2;
	int i;

	array result=(array)malloc(size*sizeof(char));
	if (!result){
		printf("issue with memory\n");
		exit(0);
	}

	for (i=0;i<size;i++){
		result[i]=src[i];
	}

	result[i]='\0';
	return result;
}



int get_command(array * input){
	int i=0;
	int result=-1;
	array funcs[9];
	funcs[0]="read_comp";
	funcs[1]="print_comp";
	funcs[2]="add_comp";
	funcs[3]="sub_comp";
	funcs[4]="mult_comp_real";
	funcs[5]="mult_comp_img";
	funcs[6]="mult_comp_comp";
	funcs[7]="abs_comp";
	funcs[8]="halt";


	printf("Checking the command\n");
	printf("%s\n",input[0]);
	for (i=0;i<9;i++){
		printf("");
		if ((strcmp(input[0],funcs[i]) == 0)){
			result=i;
		}
	}



return -1;

}
