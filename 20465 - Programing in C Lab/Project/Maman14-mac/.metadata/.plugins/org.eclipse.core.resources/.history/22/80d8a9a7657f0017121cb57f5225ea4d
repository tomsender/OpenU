#include "utils.h"
#include "validator.h"


#define MAXLABELSIZE 30

#define INVALIDINPUT fprintf(stderr, "Invalid input: ");

void validate_file(bodyArray parsed, int array_size){
	int i;
	body item;

	printf(KYELLOW"------------------------------\n");
    printf("      VALIDATION STAGE:        \n");
	printf("------------------------------\n");

	NORMALCOLOR

	i=0;
	item=parsed[i];


	if(strcmp(item.label,"\0") != 0){
		/*VALIDATE LABEL*/
		printf("label exits\n");
		validate_label(item.label,&item.valid);

		if (item.valid==TRUE){
			printf(KGREEN "Label <%s> is valid\n",item.label);
		} else {
			printf(KRED "Label <%s> is invalid\n",item.label);
		}
	}

/*	if(strcmp(item.instruction,"\0") != 0){
		printf("instruction exists\n");
		validate_instruction(item.instruction);
		validate_ins_oprands(item);
	}

	if(strcmp(item.operantion,"\0") != 0){
		printf("operation exists\n");
		validate_operation(item.operantion);
		validate_oper_operands(item);
	}

	if(strcmp(item.label,"\0") != 0){

	}*/





	/*
	for (i=0;i<array_size; i++){
		item=parsed[i];
		printf("current_struct:\n");


*/
	}



void validate_label (String label, Bool * valid ){
	int length;

	printf(KGREEN, "validating label: length:\n");
	length=strlen(label);




	if (length > MAXLABELSIZE){
		*valid=FALSE;
		INVALIDINPUT
		fprintf(stderr, "Label \"%s\" is too long: \"%d\" \n",label,length);
	}

}

void validate_instruction(String inst){

}

void validate_operation(String operation){

}

void validate_ins_oprands (body item){

}

void validate_oper_operands (body item){

}
