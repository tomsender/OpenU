/*
 * parser.c
 *
 *  Created on: Aug 3, 2017
 *      Author: alexz
 */



#include "parser.h"
#include "utils.h"
#define INITIAL_SARRAY_SIZE 8000
/*
 * This macro helps calculating which parts of the array need to be copied
 */
#define CALCSIZE(array_start, index)\
	(index-array_start)*sizeof(char);

/*
 * This macro is used when I want to reresent a string as empty.
 * It allocates 1 memory and inserts \0 as the string value.
 *
 */
#define RETURN_NULL(result) \
	result=allocate_mem_string(1); \
	strcpy(result,"\0");


bodyArray  parse_file (FILE * file){
	String line;
	bodyArray parsed_file;
	int cell_counter;

	line=allocate_mem_string(MAXMEM);
	parsed_file=allocate_mem_struct(INITIAL_SARRAY_SIZE);

	cell_counter=0;


	while (  (fgets(line,MAXMEM,file)) != NULL){

		if (check_empty_line(line)==FALSE && line[0]!=';'){
			printf("______________________________________________\n");
			printf("Working on line: [%s\n",line);

			/*if line is empty*/
			/*if line is a comment*/

			parsed_file[cell_counter] = parse_line(line);
			cell_counter ++;
		}
	}
	return parsed_file;

}

body  parse_line (String str){
	body result;
	int result_size;
	char * extracted_value;
	char * current_pointer;
	int size;
	int n_skipped_spaces;
	Bool label_exists = FALSE;
	Bool instr_exists = FALSE;
	Bool oper_exists = FALSE;


	extracted_value=allocate_mem_string(MAXMEM);
	current_pointer=str;
	n_skipped_spaces=count_spaces(str);
	current_pointer += n_skipped_spaces;


	/*extract label*/
/*	strcpy(extracted_value,extract_label(current_pointer)); delete this if everything works*/
	extracted_value=extract_label(current_pointer);

	/*printf("address: %p\n",(void *)&extracted_value);*/


	result_size=strlen(extracted_value)+1;
	result.label=allocate_mem_string(result_size);
	strcpy(result.label,extracted_value);
	if ((strcmp(extracted_value,"\0")) != 0){
		label_exists=TRUE;
	}
	printf("extracted label: %s\n",result.label);

	/*extract instruction*/
	strcpy(extracted_value,extract_instruction(current_pointer));
	result_size=strlen(extracted_value)+1;
	result.instruction=allocate_mem_string(result_size);
	strcpy(result.instruction,extracted_value);
	if ((strcmp(extracted_value,"\0")) != 0){
		instr_exists=TRUE;
/*		printf("++instr_exists=TRUE\n");*/
	}
	printf("extracted inst: %s\n",result.instruction);


/*	printf("--------After instructing instruction:'%s' \n",current_pointer);*/

	/*pointers skips the label if exists*/
	if (label_exists==TRUE){
		current_pointer+=strlen(result.label) +1;
/*		printf("++label exists = TRUE\n");*/
		/*printf("--------After skipping label:'%s' \n",current_pointer);*/

	}


	n_skipped_spaces=count_spaces(current_pointer);
	current_pointer+=n_skipped_spaces;
	/*	printf("--------After removing spaces and copying to copy:'%s \n",current_pointer);*/


	/*if instruction wasn't receive, we extract the operational*/
	if (instr_exists == FALSE){
/*		printf("++instr_exists == FALSE\n");*/
		/*Extract operation*/
		strcpy(extracted_value,extract_operation(current_pointer));
		result_size=strlen(extracted_value)+1;
/*		printf("extracted value:%s, size: %d\n",extracted_value,result_size);*/
		result.operantion=allocate_mem_string(result_size);

		strncpy(result.operantion,extracted_value,result_size);
		current_pointer+=result_size-1;

		printf("+result.operation: [%s\n",result.operantion);
		if ( strcmp(extracted_value,"\0") != 0 ){
			oper_exists=TRUE;
		}
	}
	else {
		/*advance the pointer to the next space after the instruction*/
/*		printf("++ENTERED ELSE\n");*/
		size=strlen(result.instruction)+1;
		current_pointer+=size;
/*		printf("--------After skipping instruction:'%s \n",current_pointer);*/

		result.operantion=allocate_mem_string(1);
		strcpy(result.operantion,"\0");
		/*printf("op: %s", result.operantion);*/

	}

	/*PARSING OPERANDS*/
	if (strcmp(result.instruction,"data") != 0){

/*		printf("_________________________________________________\n");*/
		n_skipped_spaces=count_spaces(current_pointer);
		current_pointer+=n_skipped_spaces;
	/*	printf("current_point: [%s\n",current_pointer);*/

		strcpy(extracted_value,extract_operand(current_pointer));
		result_size=strlen(extracted_value)+1;
		result.operand1=allocate_mem_string(result_size);
		strcpy(result.operand1,extracted_value);
		current_pointer+=result_size;


		n_skipped_spaces=count_spaces(current_pointer);
		current_pointer+=n_skipped_spaces;
	/*	printf("current_point: [%s\n",current_pointer);*/

		strcpy(extracted_value,extract_operand(current_pointer));
		result_size=strlen(extracted_value)+1;
		result.operand2=allocate_mem_string(result_size);
		strcpy(result.operand2,extracted_value);
		current_pointer+=result_size;

/*		printf("++current pointer:[%s \n",current_pointer);*/

		/*For non .data we expect to receive 2 operands. if more are received,
		 * They are stored as junk to be validated by a different module, at a later stage
		 * */
		if (current_pointer[0] != '\n'){
			result_size=strlen(current_pointer);
			result.operand3=allocate_mem_string(result_size);
			strncpy(result.operand3,current_pointer,result_size);
		}

	}

	/*if we are handling .data:*/

	free(extracted_value);
/*
	fprintf(stderr,"-------------------------------------------\n");
	fprintf(stderr,"End of parse line\n");*/

	return result;

}

/*
 * Recieves a substrings
 * Counts how many operands there are by counting ','
 * move with a pointer - count each operand, allocate memory in required size and split
 */
String extract_operand (String str){
	int operand_size;
	String ptr;
	String result;


/*	printf("---------------------------\n");
	printf("inside extract_operands\n");
	printf("---------------------------\n");
	printf(".\n.\n.\n");*/

	ptr=str;

	while(ptr[0]!='\n' && ptr[0]!=' ' && ptr[0]!=',' && ptr[0]!='t' && ptr[0]!='\0'){
		ptr++;
	}

	operand_size=CALCSIZE(str,ptr);
/*	printf("calculated size:%d\n",operand_size);*/

	result=allocate_mem_string(operand_size+1);
	strncpy(result,str,operand_size);
/*	printf("[%s]\n",result);*/

	return result;


}




String extract_label (String line){
	char * result;
	char * found_char;
	char * array_start;
	int size;

/*	fprintf(stderr,"---Extract_lable: started\n");*/

	found_char = strchr(line,':');
	if (!found_char){
		RETURN_NULL(result)
		return result;

	}
	array_start=line;
	/*size = (found_char-array_start) * sizeof(char);*/
	size = CALCSIZE(array_start,found_char);
/*	fprintf(stderr,"---label length: %d\n",size);*/
	result = allocate_mem_string(size+1);

	strncpy(result,line,size);
/*	printf(" in result:%s\n",result);*/
/*	fprintf(stderr,"---Extract_lable: Finished\n");*/
	memset(result+size,'\0',1);
	return result;

}


char * extract_instruction(char * str){
	String result;
	char * found_char;
	char * array_start;
	char * inspection_start;
	char * inspection_end;
	int size;

	result=allocate_mem_string(strlen(str)+1);

	array_start=str;

/*	fprintf(stderr,"---Extract_instruction: started\n");*/
/*	fprintf(stderr,"---Extracting: dot \n");*/

	found_char = strchr(str,'.');
	if (!found_char){
		RETURN_NULL(result)
		return result;
	}

	/*In which position the dot appears. 1 is added because we care about what's after the dot*/
	/*size = ((found_char - array_start) * sizeof(char))+1;*/
	size=CALCSIZE(array_start,found_char);
	size++;

/*	fprintf(stderr,"---Calculated dot position:%d\n",size);*/
	inspection_start=str+size;
/*	strcpy(copy,inspection_start); Now copy holds everything after the dot*/

/*	fprintf(stderr,"---Extracting: space \n");*/
	inspection_end = strchr(inspection_start,' ');
	if (!inspection_end){
		size=strlen(inspection_start);
		inspection_end=inspection_start+size; /*point to the last cell of the array*/
	}

	size=CALCSIZE(inspection_start, inspection_end);
	strncpy(result,inspection_start,size);
	/*strncpy(result,copy,size);*/
/*		printf("in result: %s\n",result);*/
	/*fprintf(stderr,"---Extraction_instruction: Completed.\n");*/

	return result;
}

/*This function runs from the first cell until the first non-blank char and removes the blanks*/
String remove_first_spaces(String str){
	int new_size;
	int counter=0;
	int i=0;
	String result;


	while ( str[i]=='\t' ||  str[i]==' '){
		counter++;
		i++;
	}

	if (counter == 0){
		return str;
	}
	new_size=(strlen(str))-counter;
	result=allocate_mem_string(new_size);
	strcpy(result,str+counter);

	return result;

}

/*counts how many blank chars there are for advancing the pointer*/
int count_spaces (String str){
	int n=0;
	int i=0;

	while ( str[i]=='\t' ||  str[i]==' '){
		n++;
		i++;
	}

	return n;
}

String extract_operation(String str){
	int n_spaces;
	int size;
	String result;
	char * ptr;

/*	fprintf(stderr,"---Starting extract_operation\n");*/
	n_spaces= count_spaces(str);
	str +=n_spaces;
	/*printf("--------remove spaces again: '%s \n",str);*/


	ptr=strchr(str,' ');
	size=CALCSIZE(str,ptr);

	result=allocate_mem_string(size+1);
	memcpy(result,str,size);
/*	fprintf(stderr,"---Extract_operation: completed\n");*/

	return result;
}

Bool check_empty_line(String str){
	int i;
	int size;
	Bool empty = TRUE;
	size=strlen(str);

	i=0;
	while (i<size && empty==TRUE){
		if (str[i]!='\t' && str[i]!='\n' && str[i]!=' '){
			empty=FALSE;

		}
		i++;
	}

	return empty;
}
