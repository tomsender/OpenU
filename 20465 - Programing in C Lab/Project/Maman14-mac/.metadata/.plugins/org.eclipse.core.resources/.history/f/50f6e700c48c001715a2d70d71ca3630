/*
 * second_scan.c
 *
 *  Created on: Aug 27, 2017
 *      Author: alexz
 */

#include "second_scan.h"
#define WORD_SIZE 10
#define OPCODE_SIZE 4
#define OPER_SIZE 2
#define ABSOLUTE_VALUE 0
#define EXTERNAL_VALUE 1
#define RELLOCATABLE_VALUE 2
#define MAX_DATA_ARR_SIZE 10000

Bool second_scan (bodyArray parsed, int parsed_size, symbol_ptr * symbols, int ic){
	int IC,DC,i,length;
	int ear;
	int result,counter,data_counter;
	int coded_array[MAXMEM];
	body current;
	int opcode,dest,src;
	Operand_type op1_type,op2_type;
	int* data,data_pointer;
	Bool valid_file=TRUE;



	IC=DC=0;
	counter=0;
	data=(int *)allocate_mem_general(MAX_DATA_ARR_SIZE,sizeof(int));

	/*Check if the label is valid*/
	for (i=0;i<parsed_size;i++){
		current=parsed[i];
		if (strlen(current.label)>0){
			if (!search_symbol(current.label,*symbols)){ /*label is not found*/
				fprintf(stderr, "Error in line %d: Label %s is undefined\n",current.line_number,current.label);
				valid_file=FALSE;
			}
		}
	}


	if (valid_file==FALSE){
		return FALSE;
	}

	/*ALL LABELS ARE VALID*/

	for (i=0;i<parsed_size;i++){
		current=parsed[i];





		if (strlen(current.operantion)>0){
			opcode=get_opcode(current.operantion);
			printf(KMAGENTA"returned opcode: %d\n",opcode);


			op1_type=get_operand_type(current.OPERAND1);
			op2_type=get_operand_type(current.OPERAND2);

			printf("op1=%d\n",op1_type);
			result=code_command_line(opcode,op1_type,op2_type,ABSOLUTE_VALUE);
			coded_array[counter]=result;
			counter++;



		}
		else {
			printf("Entered instruction condition\n");

			if (strcmp(current.instruction,DATA)==0){
				length=current.data_values_number;

				for(i=0;i<length;i++){
					data_pointer=current.data_int_values[i];
					data_pointer+=1;
				}

				for(i=0;i<length;i++){
					printf("%d",data[i]);
				}







			}
			if (strcmp(current.instruction,STR)==0){
				length=strlen(current.data_string_array);
				strcat(data_pointer,current.data_string_array);
				data_pointer+=length;
			}





		}

		if ( strcmp(current.instruction,DATA) !=0  &&  strcmp(current.instruction,MAT) !=0 && strcmp(current.instruction,STR)){

		}
		else {
			/*treat mat and data*/
		}






	}

		printf(BOLDMAGENTA "Data DB:\n%s\n",data);


		print_binary_array(coded_array,counter);
		printf("---End of Second Scan\n");
		return TRUE;
}


/*
int code = 0; // 0000000000000
int fifthBit = 1 << 5; //100000

code = 2; // 0000010
code = code << 4 //00000100000*/


int code_command_line(int opcode,Operand_type op1, Operand_type op2, int rea){
	int op1_coded,op2_coded;
	int result=0;

	printf(KCYN);

	result=opcode;
	result<<=WORD_SIZE-OPCODE_SIZE;
	printf("opcode received: %d result: ",opcode);
	print_bin(result);
	if (opcode <4 || opcode==6 ){
		/*src exists*/

		op1_coded=op1<<OPER_SIZE*2;
		op2_coded=op2<<OPER_SIZE;

		result|=op1_coded;
		result|=op2_coded;

		printf("operand1: %d\n",op1);


	}

	else { /*opcode is4,5, or >6*/
		/*no source for these commands*/



		op1_coded=op1<<OPER_SIZE;

		result|=op1_coded;

	}



		/*EXTRACT THE LAST BITS*/
	if(rea!=ABSOLUTE_VALUE){
		result|=rea;
	}




	printf("result: ");
	print_bin(result);
	NORMALCOLOR

	return result;
}








int get_opcode(String command){

	if (strcmp(command,CMP) ==0 ){
		return 1;
	}

	if (strcmp(command,ADD) ==0 ){
		return 2;
	}

	if (strcmp(command,SUB) ==0 ){
		return 3;
	}


	if (strcmp(command,NOT) ==0 ){
		return 4;
	}

	if (strcmp(command,CLR) ==0 ){
		return 5;
	}
	if (strcmp(command,LEA) ==0 ){
		return 6;
	}

	if (strcmp(command,INC)==0){
		return 7;
	}

	if (strcmp(command,DEC)==0){
		return 8;
	}

	if (strcmp(command,JMP)==0){
		return 9;
	}

	if (strcmp(command,BNE)==0){
		return 10;
	}

	if (strcmp(command,RED)==0){
		return 11;
	}
	if (strcmp(command,PRN)==0){
		return 12;
	}

	if (strcmp(command,JSR)==0){
		return 13;
	}

	if (strcmp(command,RTS)==0){
		return 14;
	}

	if (strcmp(command,STOP)==0){
		return 15;
	}
	return 0;

}
