/*
 * second_scan.c
 *
 *  Created on: Aug 27, 2017
 *      Author: alexz
 */

#include "second_scan.h"
#define WORD_SIZE 10
#define OPCODE_SIZE 4
#define OPER_SIZE 2

Bool second_scan (bodyArray parsed, int parsed_size, symbol_ptr * symbols, int ic){
	int IC,DC,i,mem_counter,result,codded_cell;
	int * coded_array[MAXMEM];
	body current;
	unsigned int opcode,src,dest;
	String operand_value;
	Operand_type op_type;
	Bool valid_file=TRUE;




	IC=DC=0;
	mem_counter=0;/*how many lines are required*/
	codded_cell=0;


	/*Check if the label is valid*/
	for (i=0;i<parsed_size;i++){
		current=parsed[i];
		if (strlen(current.label)>0){
			if (!search_symbol(current.label,*symbols)){ /*label is not found*/
				fprintf(stderr, "Error in line %d: Label %s is undefined\n",current.line_number,current.label);
				valid_file=FALSE;
			}
		}
	}


	if (valid_file==FALSE){
		return FALSE;
	}

	/*ALL LABELS ARE VALID*/

		/*get the command*/

	result=code_command_line(current);



		return TRUE;
}


/*
int code = 0; // 0000000000000
int fifthBit = 1 << 5; //100000

code = 2; // 0000010
code = code << 4 //00000100000*/


int code_command_line(body item){
	int opcode;
	int result=0;

	if (strlen(item.operantion)>0){
		opcode=get_opcode(item.operantion);
		result=opcode<<WORD_SIZE-OPCODE_SIZE;

		printf(KCYN"received opcode: %d\n",opcode);
		print_bin(result);
		NORMALCOLOR

		if (opcode <4 || opcode==6 ){
			/*src exists*/
			}

		else { /*opcode is4,5, or >6*/
			src=0; /*no source for these commands*/
			printf(KCYN"when source =0\n");
			print_bin(result);
			NORMALCOLOR

			/*handle dest*/

			dest=get_operand_type(current.OPERAND1);
			if (dest==INTERMID){
				result<<=OPER_SIZE;
			}
			else {

				result|=(dest<<OPER_SIZE);
			}
			printf(KCYN "Extracted operand_type:%d, result: ",dest);
			print_bin(result);
			NORMALCOLOR

		}


		/*EXTRACT THE LAST BITS*/

		}







}








int get_opcode(String command){

	if (strcmp(command,CMP) ==0 ){
		return 1;
	}

	if (strcmp(command,ADD) ==0 ){
		return 2;
	}

	if (strcmp(command,SUB) ==0 ){
		return 3;
	}


	if (strcmp(command,NOT) ==0 ){
		return 4;
	}

	if (strcmp(command,CLR) ==0 ){
		return 5;
	}
	if (strcmp(command,LEA) ==0 ){
		return 6;
	}

	if (strcmp(command,INC)==0){
		return 7;
	}

	if (strcmp(command,DEC)==0){
		return 8;
	}

	if (strcmp(command,JMP)==0){
		return 9;
	}

	if (strcmp(command,BNE)==0){
		return 10;
	}

	if (strcmp(command,RED)==0){
		return 11;
	}
	if (strcmp(command,PRN)==0){
		return 12;
	}

	if (strcmp(command,JSR)==0){
		return 13;
	}

	if (strcmp(command,RTS)==0){
		return 14;
	}

	if (strcmp(command,STOP)==0){
		return 15;
	}
	return 0;

}
